# File: docker-compose.yml
version: '3.8'

services:
  # API Service (your application)
  api-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTLP_METRICS_ENDPOINT=http://otel-collector:4318/v1/metrics
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atlan
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - AUTH_SERVICE_URL=http://auth-service:8080
      - ANALYTICS_SERVICE_URL=http://analytics-service:8080
    depends_on:
      - postgres
      - otel-collector
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - observability-network

  # PostgreSQL Database
  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=atlan
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - observability-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "8889:8889"  # Prometheus metrics exposed by collector
    depends_on:
      - prometheus
      - loki
      - tempo
    networks:
      - observability-network
    restart: unless-stopped

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus-rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - observability-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
      - loki
      - tempo
    restart: unless-stopped
    networks:
      - observability-network

  # Loki (Logs)
  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    restart: unless-stopped
    networks:
      - observability-network

  # Tempo (Traces)
  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"  # tempo
    restart: unless-stopped
    networks:
      - observability-network

  # Promtail (Log Collection)
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./config/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - observability-network

  # Node Exporter (Host Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - observability-network

  # Alertmanager (Alerting)
  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    restart: unless-stopped
    networks:
      - observability-network

  # Add placeholder services for services referenced but not defined
  auth-service:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./mock-services/auth-service.conf:/etc/nginx/conf.d/default.conf
    networks:
      - observability-network

  analytics-service:
    image: nginx:alpine
    ports:
      - "8081:80"
    volumes:
      - ./mock-services/analytics-service.conf:/etc/nginx/conf.d/default.conf
    networks:
      - observability-network

  # Add a PostgreSQL exporter to collect database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres:5432/atlan?sslmode=disable
    ports:
      - "9187:9187"
    restart: unless-stopped
    networks:
      - observability-network
    depends_on:
      - postgres

networks:
  observability-network:
    driver: bridge

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
  loki-data:
  tempo-data: